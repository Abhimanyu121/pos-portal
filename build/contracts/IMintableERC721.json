{
  "contractName": "IMintableERC721",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "metaData",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metaData\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred.     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.     * Requirements:     * - The caller must own the token or be an approved operator. - `tokenId` must exist.     * Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"exists(uint256)\":{\"details\":\"this check will be used by the predicate to determine if the token needs to be minted or transfered\",\"params\":{\"tokenId\":\"tokenId being checked\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token.     * Requirements:     * - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`.     * See {setApprovalForAll}\"},\"mint(address,uint256)\":{\"details\":\"Should be callable only by MintableERC721Predicate Make sure minting is done only by this function\",\"params\":{\"tokenId\":\"tokenId being minted\",\"user\":\"user address for whom token is being minted\"}},\"mint(address,uint256,bytes)\":{\"details\":\"Should be callable only by MintableERC721Predicate Make sure minting is only done either by this function/ \\ud83d\\udc46\",\"params\":{\"metaData\":\"Associated token metadata, to be decoded & set using `setTokenMetadata`     * Note : If you're interested in taking token metadata from L2 to L1 during exit, you must implement this method\",\"tokenId\":\"tokenId being minted\",\"user\":\"user address for whom token is being minted\"}},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token.     * Requirements:     * - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.     * Requirements:     * - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.     * Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`.      * Requirements:     * - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.      * Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.     * Requirements:     * - The `operator` cannot be the caller.     * Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created.     * This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`.     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.     * Requirements:     * - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.     * Emits a {Transfer} event.\"}}},\"userdoc\":{\"methods\":{\"exists(uint256)\":{\"notice\":\"check if token already exists, return true if it does exist\"},\"mint(address,uint256)\":{\"notice\":\"called by predicate contract to mint tokens while withdrawing\"},\"mint(address,uint256,bytes)\":{\"notice\":\"called by predicate contract to mint tokens while withdrawing with metadata from L2\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/abhimanyushekhawat/projects/matic-contracts/contracts/root/RootToken/IMintableERC721.sol\":\"IMintableERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/abhimanyushekhawat/projects/matic-contracts/contracts/root/RootToken/IMintableERC721.sol\":{\"keccak256\":\"0xf205138fd79e38c272000f4e512801c7983a45a469f55ca8663a5441870a7604\",\"urls\":[\"bzz-raw://0657c5fcb65239bfce2672852f3428908d8efa13124dcc4430bfd090b1a4b284\",\"dweb:/ipfs/QmWG3a1AJ9w3HETy3tSz8z1JVxGMxC8yc5KFoZ5FQZz3pB\"]},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"keccak256\":\"0xfa152b6e88a1dc50780e8f1580426dc23ad2e1e2c2f086a088adf206a202f453\",\"urls\":[\"bzz-raw://5127b264994adab88fae419b1c493efc5acd07134c19ee5c0397e50018291ebf\",\"dweb:/ipfs/QmWwJZVhvdmvUCdimbb6R2Jiu59zjPqm6XTMchM6LaEHAp\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x227bafd3e165b13f5d98c42a44376e48d41f4a265db8803f2707faaeae9659aa\",\"urls\":[\"bzz-raw://c9aa7959a30871669ce46172cd117b084b607d602d9ce695ce79005582b0b69b\",\"dweb:/ipfs/QmXZUWeLXmArQinHL4RnacJLT22GvCExqREYM6pHLX7CX9\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "import {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\npragma solidity 0.6.6;\n\ninterface IMintableERC721 is IERC721 {\n    /**\n     * @notice called by predicate contract to mint tokens while withdrawing\n     * @dev Should be callable only by MintableERC721Predicate\n     * Make sure minting is done only by this function\n     * @param user user address for whom token is being minted\n     * @param tokenId tokenId being minted\n     */\n    function mint(address user, uint256 tokenId) external;\n\n    /**\n     * @notice called by predicate contract to mint tokens while withdrawing with metadata from L2\n     * @dev Should be callable only by MintableERC721Predicate\n     * Make sure minting is only done either by this function/ 👆\n     * @param user user address for whom token is being minted\n     * @param tokenId tokenId being minted\n     * @param metaData Associated token metadata, to be decoded & set using `setTokenMetadata`\n     *\n     * Note : If you're interested in taking token metadata from L2 to L1 during exit, you must\n     * implement this method\n     */\n    function mint(address user, uint256 tokenId, bytes calldata metaData) external;\n\n    /**\n     * @notice check if token already exists, return true if it does exist\n     * @dev this check will be used by the predicate to determine if the token needs to be minted or transfered\n     * @param tokenId tokenId being checked\n     */\n    function exists(uint256 tokenId) external view returns (bool);\n}\n",
  "sourcePath": "/Users/abhimanyushekhawat/projects/matic-contracts/contracts/root/RootToken/IMintableERC721.sol",
  "ast": {
    "absolutePath": "/Users/abhimanyushekhawat/projects/matic-contracts/contracts/root/RootToken/IMintableERC721.sol",
    "exportedSymbols": {
      "IMintableERC721": [
        6079
      ]
    },
    "id": 6080,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
        "id": 6049,
        "nodeType": "ImportDirective",
        "scope": 6080,
        "sourceUnit": 13271,
        "src": "0:73:42",
        "symbolAliases": [
          {
            "foreign": {
              "argumentTypes": null,
              "id": 6048,
              "name": "IERC721",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": null,
              "src": "8:7:42",
              "typeDescriptions": {
                "typeIdentifier": null,
                "typeString": null
              }
            },
            "local": null
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 6050,
        "literals": [
          "solidity",
          "0.6",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "75:22:42"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 6051,
              "name": "IERC721",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 13270,
              "src": "128:7:42",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC721_$13270",
                "typeString": "contract IERC721"
              }
            },
            "id": 6052,
            "nodeType": "InheritanceSpecifier",
            "src": "128:7:42"
          }
        ],
        "contractDependencies": [
          10002,
          13270
        ],
        "contractKind": "interface",
        "documentation": null,
        "fullyImplemented": false,
        "id": 6079,
        "linearizedBaseContracts": [
          6079,
          13270,
          10002
        ],
        "name": "IMintableERC721",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": {
              "id": 6053,
              "nodeType": "StructuredDocumentation",
              "src": "142:312:42",
              "text": "@notice called by predicate contract to mint tokens while withdrawing\n@dev Should be callable only by MintableERC721Predicate\nMake sure minting is done only by this function\n@param user user address for whom token is being minted\n@param tokenId tokenId being minted"
            },
            "functionSelector": "40c10f19",
            "id": 6060,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 6058,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6055,
                  "mutability": "mutable",
                  "name": "user",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 6060,
                  "src": "473:12:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6054,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "473:7:42",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6057,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 6060,
                  "src": "487:15:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6056,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "487:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "472:31:42"
            },
            "returnParameters": {
              "id": 6059,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "512:0:42"
            },
            "scope": 6079,
            "src": "459:54:42",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 6061,
              "nodeType": "StructuredDocumentation",
              "src": "519:574:42",
              "text": "@notice called by predicate contract to mint tokens while withdrawing with metadata from L2\n@dev Should be callable only by MintableERC721Predicate\nMake sure minting is only done either by this function/ 👆\n@param user user address for whom token is being minted\n@param tokenId tokenId being minted\n@param metaData Associated token metadata, to be decoded & set using `setTokenMetadata`\n     * Note : If you're interested in taking token metadata from L2 to L1 during exit, you must\nimplement this method"
            },
            "functionSelector": "94d008ef",
            "id": 6070,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "mint",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 6068,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6063,
                  "mutability": "mutable",
                  "name": "user",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 6070,
                  "src": "1112:12:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 6062,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1112:7:42",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6065,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 6070,
                  "src": "1126:15:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6064,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1126:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 6067,
                  "mutability": "mutable",
                  "name": "metaData",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 6070,
                  "src": "1143:23:42",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 6066,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1143:5:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1111:56:42"
            },
            "returnParameters": {
              "id": 6069,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1176:0:42"
            },
            "scope": 6079,
            "src": "1098:79:42",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": null,
            "documentation": {
              "id": 6071,
              "nodeType": "StructuredDocumentation",
              "src": "1183:242:42",
              "text": "@notice check if token already exists, return true if it does exist\n@dev this check will be used by the predicate to determine if the token needs to be minted or transfered\n@param tokenId tokenId being checked"
            },
            "functionSelector": "4f558e79",
            "id": 6078,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "exists",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 6074,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6073,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 6078,
                  "src": "1446:15:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6072,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1446:7:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1445:17:42"
            },
            "returnParameters": {
              "id": 6077,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6076,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 6078,
                  "src": "1486:4:42",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 6075,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1486:4:42",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1485:6:42"
            },
            "scope": 6079,
            "src": "1430:62:42",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 6080,
        "src": "99:1395:42"
      }
    ],
    "src": "0:1495:42"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "/Users/abhimanyushekhawat/projects/matic-contracts/contracts/root/RootToken/IMintableERC721.sol",
      "exportedSymbols": {
        "IMintableERC721": [
          6079
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "SourceUnit": 13271,
          "absolutePath": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
          "file": "@openzeppelin/contracts/token/ERC721/IERC721.sol",
          "scope": 6080,
          "symbolAliases": [
            {
              "foreign": {
                "attributes": {
                  "argumentTypes": null,
                  "overloadedDeclarations": [
                    null
                  ],
                  "referencedDeclaration": null,
                  "type": null,
                  "value": "IERC721"
                },
                "id": 6048,
                "name": "Identifier",
                "src": "8:7:42"
              },
              "local": null
            }
          ],
          "unitAlias": ""
        },
        "id": 6049,
        "name": "ImportDirective",
        "src": "0:73:42"
      },
      {
        "attributes": {
          "literals": [
            "solidity",
            "0.6",
            ".6"
          ]
        },
        "id": 6050,
        "name": "PragmaDirective",
        "src": "75:22:42"
      },
      {
        "attributes": {
          "abstract": false,
          "contractDependencies": [
            10002,
            13270
          ],
          "contractKind": "interface",
          "documentation": null,
          "fullyImplemented": false,
          "linearizedBaseContracts": [
            6079,
            13270,
            10002
          ],
          "name": "IMintableERC721",
          "scope": 6080
        },
        "children": [
          {
            "attributes": {
              "arguments": null
            },
            "children": [
              {
                "attributes": {
                  "contractScope": null,
                  "name": "IERC721",
                  "referencedDeclaration": 13270,
                  "type": "contract IERC721"
                },
                "id": 6051,
                "name": "UserDefinedTypeName",
                "src": "128:7:42"
              }
            ],
            "id": 6052,
            "name": "InheritanceSpecifier",
            "src": "128:7:42"
          },
          {
            "attributes": {
              "body": null,
              "functionSelector": "40c10f19",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "mint",
              "overrides": null,
              "scope": 6079,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "text": "@notice called by predicate contract to mint tokens while withdrawing\n@dev Should be callable only by MintableERC721Predicate\nMake sure minting is done only by this function\n@param user user address for whom token is being minted\n@param tokenId tokenId being minted"
                },
                "id": 6053,
                "name": "StructuredDocumentation",
                "src": "142:312:42"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "user",
                      "overrides": null,
                      "scope": 6060,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 6054,
                        "name": "ElementaryTypeName",
                        "src": "473:7:42"
                      }
                    ],
                    "id": 6055,
                    "name": "VariableDeclaration",
                    "src": "473:12:42"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "overrides": null,
                      "scope": 6060,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 6056,
                        "name": "ElementaryTypeName",
                        "src": "487:7:42"
                      }
                    ],
                    "id": 6057,
                    "name": "VariableDeclaration",
                    "src": "487:15:42"
                  }
                ],
                "id": 6058,
                "name": "ParameterList",
                "src": "472:31:42"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 6059,
                "name": "ParameterList",
                "src": "512:0:42"
              }
            ],
            "id": 6060,
            "name": "FunctionDefinition",
            "src": "459:54:42"
          },
          {
            "attributes": {
              "body": null,
              "functionSelector": "94d008ef",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "mint",
              "overrides": null,
              "scope": 6079,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "text": "@notice called by predicate contract to mint tokens while withdrawing with metadata from L2\n@dev Should be callable only by MintableERC721Predicate\nMake sure minting is only done either by this function/ 👆\n@param user user address for whom token is being minted\n@param tokenId tokenId being minted\n@param metaData Associated token metadata, to be decoded & set using `setTokenMetadata`\n     * Note : If you're interested in taking token metadata from L2 to L1 during exit, you must\nimplement this method"
                },
                "id": 6061,
                "name": "StructuredDocumentation",
                "src": "519:574:42"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "user",
                      "overrides": null,
                      "scope": 6070,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 6062,
                        "name": "ElementaryTypeName",
                        "src": "1112:7:42"
                      }
                    ],
                    "id": 6063,
                    "name": "VariableDeclaration",
                    "src": "1112:12:42"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "overrides": null,
                      "scope": 6070,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 6064,
                        "name": "ElementaryTypeName",
                        "src": "1126:7:42"
                      }
                    ],
                    "id": 6065,
                    "name": "VariableDeclaration",
                    "src": "1126:15:42"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "metaData",
                      "overrides": null,
                      "scope": 6070,
                      "stateVariable": false,
                      "storageLocation": "calldata",
                      "type": "bytes",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bytes",
                          "type": "bytes"
                        },
                        "id": 6066,
                        "name": "ElementaryTypeName",
                        "src": "1143:5:42"
                      }
                    ],
                    "id": 6067,
                    "name": "VariableDeclaration",
                    "src": "1143:23:42"
                  }
                ],
                "id": 6068,
                "name": "ParameterList",
                "src": "1111:56:42"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 6069,
                "name": "ParameterList",
                "src": "1176:0:42"
              }
            ],
            "id": 6070,
            "name": "FunctionDefinition",
            "src": "1098:79:42"
          },
          {
            "attributes": {
              "body": null,
              "functionSelector": "4f558e79",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "exists",
              "overrides": null,
              "scope": 6079,
              "stateMutability": "view",
              "virtual": false,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "text": "@notice check if token already exists, return true if it does exist\n@dev this check will be used by the predicate to determine if the token needs to be minted or transfered\n@param tokenId tokenId being checked"
                },
                "id": 6071,
                "name": "StructuredDocumentation",
                "src": "1183:242:42"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "overrides": null,
                      "scope": 6078,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 6072,
                        "name": "ElementaryTypeName",
                        "src": "1446:7:42"
                      }
                    ],
                    "id": 6073,
                    "name": "VariableDeclaration",
                    "src": "1446:15:42"
                  }
                ],
                "id": 6074,
                "name": "ParameterList",
                "src": "1445:17:42"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "",
                      "overrides": null,
                      "scope": 6078,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bool",
                      "value": null,
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bool",
                          "type": "bool"
                        },
                        "id": 6075,
                        "name": "ElementaryTypeName",
                        "src": "1486:4:42"
                      }
                    ],
                    "id": 6076,
                    "name": "VariableDeclaration",
                    "src": "1486:4:42"
                  }
                ],
                "id": 6077,
                "name": "ParameterList",
                "src": "1485:6:42"
              }
            ],
            "id": 6078,
            "name": "FunctionDefinition",
            "src": "1430:62:42"
          }
        ],
        "id": 6079,
        "name": "ContractDefinition",
        "src": "99:1395:42"
      }
    ],
    "id": 6080,
    "name": "SourceUnit",
    "src": "0:1495:42"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.6+commit.6c089d02.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-03-01T19:59:54.812Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred.     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.     * Requirements:     * - The caller must own the token or be an approved operator. - `tokenId` must exist.     * Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "exists(uint256)": {
        "details": "this check will be used by the predicate to determine if the token needs to be minted or transfered",
        "params": {
          "tokenId": "tokenId being checked"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token.     * Requirements:     * - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`.     * See {setApprovalForAll}"
      },
      "mint(address,uint256)": {
        "details": "Should be callable only by MintableERC721Predicate Make sure minting is done only by this function",
        "params": {
          "tokenId": "tokenId being minted",
          "user": "user address for whom token is being minted"
        }
      },
      "mint(address,uint256,bytes)": {
        "details": "Should be callable only by MintableERC721Predicate Make sure minting is only done either by this function/ 👆",
        "params": {
          "metaData": "Associated token metadata, to be decoded & set using `setTokenMetadata`     * Note : If you're interested in taking token metadata from L2 to L1 during exit, you must implement this method",
          "tokenId": "tokenId being minted",
          "user": "user address for whom token is being minted"
        }
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token.     * Requirements:     * - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked.     * Requirements:     * - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.     * Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`.      * Requirements:     * - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.      * Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.     * Requirements:     * - The `operator` cannot be the caller.     * Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created.     * This function call must use less than 30 000 gas."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`.     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.     * Requirements:     * - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.     * Emits a {Transfer} event."
      }
    }
  },
  "userdoc": {
    "methods": {
      "exists(uint256)": {
        "notice": "check if token already exists, return true if it does exist"
      },
      "mint(address,uint256)": {
        "notice": "called by predicate contract to mint tokens while withdrawing"
      },
      "mint(address,uint256,bytes)": {
        "notice": "called by predicate contract to mint tokens while withdrawing with metadata from L2"
      }
    }
  }
}